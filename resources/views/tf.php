<?php
// -*- coding: utf-8 -*-
// tf-idf.ipynb
// Automatically generated by Colaboratory.
// Original file is located at https://colab.research.google.com/drive/1h_vQQk-k1ne_NP6pnQzQa5i4C0K5cUsL

ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require_once 'vendor/autoload.php';

use Goutte\Client;
use Symfony\Component\HttpClient\HttpClient;

use Symfony\Component\DomCrawler\Crawler;
use Symfony\Contracts\HttpClient\HttpClientInterface;
use Symfony\Component\HttpClient\Exception\TransportExceptionInterface;


use Illuminate\Support\Collection;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use Illuminate\Http\Request;

use Illuminate\Http\Client\Response;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\File;

use League\Csv\Reader;
use League\Csv\Statement;


use Illuminate\Support\Arr;


use Illuminate\Support\Carbon;

use Illuminate\Support\Facades\Artisan;


use Illuminate\Support\Facades\DB;



use Symfony\Component\Process\Process;
use Symfony\Component\Process\Exception\ProcessFailedException;

use Symfony\Component\DomCrawler\UriResolver;

use Illuminate\Support\Facades\Mail;

use Illuminate\Support\Facades\Queue;




function get_text($url) {
    try {
        $context = stream_context_create(
            array(
                "http" => array(
                    "user_agent" => "Mozilla/5.0"
                )
            )
        );
        $webpage = file_get_contents($url, false, $context);
        $soup = new DOMDocument();
        libxml_use_internal_errors(true);
        $soup->loadHTML($webpage);
        $texts = $soup->getElementsByTagName("body")->item(0)->childNodes;
        $res = "";
        foreach ($texts as $text) {
            if ($text->nodeName != "script" && $text->nodeName != "style") {
                $res .= $text->textContent . " ";
            }
        }
        return $res;
    } catch (Exception $e) {
        return false;
    }
}

$stop_words = array_map('trim', file('https://stopwordapi.com/api/v1/stopwords?langs=en'));

echo count($stop_words) . "\n";
print_r($stop_words);

$text = explode(" ", get_text('https://en.wikipedia.org/wiki/Machine_learning'));
print_r($text);
echo '---------------------------------' . "\n";

$filtered_sentence = array_filter($text);

print_r($filtered_sentence);

$filtered_sentence = array_filter($text, function($word) use ($stop_words) {
    return !in_array(strtolower($word), $stop_words);
});

print_r($text);
echo '---------------------------------' . "\n";
print_r($filtered_sentence);

// echo '---------------------------------' . "\n";
// $filtered_sentence = array_map(function($word) {
//     return (new PorterStemmer())->stem($word);
// }, $filtered_sentence);

// print_r($filtered_sentence);


// function get_source($url) {
//     $client = new Client(HttpClient::create(['timeout' => 60]));
//     try {
//         return $client->request('GET', $url);
//     } catch (Exception $e) {
//         echo $e;
//     }
// }

?>